import os
from dotenv import load_dotenv
load_dotenv()


import asyncio
from fastmcp import FastMCP
from bank_functions import (
    get_balance, get_transactions, transfer_money, get_last_incoming_transaction, 
    get_accounts_info, get_incoming_sum_for_period, get_outgoing_sum_for_period, 
    get_last_3_transfer_recipients, get_largest_transaction
)
from demir_functions import (
    list_all_card_names, get_card_details, compare_cards, get_card_limits, get_card_benefits, 
    get_cards_by_type, get_cards_by_payment_system, get_cards_by_fee_range, get_cards_by_currency,
    get_card_instructions, get_card_conditions, get_cards_with_features, get_card_recommendations,
    get_bank_info, get_bank_mission, get_bank_values, get_ownership_info, get_branch_network,
    get_contact_info, get_complete_about_us, get_about_us_section,
    list_all_deposit_names, get_deposit_details, compare_deposits, get_deposits_by_currency,
    get_deposits_by_term_range, get_deposits_by_min_amount, get_deposits_by_rate_range,
    get_deposits_with_replenishment, get_deposits_with_capitalization, get_deposits_by_withdrawal_type,
    get_deposit_recommendations, get_government_securities, get_child_deposits, get_online_deposits
)

from models import User
from app import app
import json
import logging


# Create FastMCP server
server = FastMCP("banking-mcp-server")

# Tool: Get balance
@server.tool(
    name="get_balance",
    description="–ö–æ–ª–¥–æ–Ω—É—É—á—É–Ω—É–Ω –±–∞—Ä–¥—ã–∫ —ç—Å–µ–ø—Ç–µ—Ä–∏–Ω–¥–µ–≥–∏ –∂–∞–ª–ø—ã –±–∞–ª–∞–Ω—Å—Ç—ã –∞–ª—É—É."
)
async def get_balance_tool(user_id: int):
    """Get user's total balance across all accounts"""
    with app.app_context():
        user = User.query.get(user_id)
        if not user:
            return "–ö–æ–ª–¥–æ–Ω—É—É—á—É —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫."
        _, result = get_balance(user)
        return result

# Tool: Get transactions (limit as function argument)
@server.tool(
    name="get_transactions",
    description="–ö–æ–ª–¥–æ–Ω—É—É—á—É–Ω—É–Ω –∞–∫—ã—Ä–∫—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–ª–∞—Ä—ã–Ω—ã–Ω —Ç–∏–∑–º–µ—Å–∏–Ω –∞–ª—É—É (5–∫–µ —á–µ–π–∏–Ω)."
)
async def get_transactions_tool(user_id: int, limit: int = 5):
    """Get user's recent transactions"""
    with app.app_context():
        user = User.query.get(user_id)
        if not user:
            return "–ö–æ–ª–¥–æ–Ω—É—É—á—É —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫."
        txs, err = get_transactions(user, limit=limit)
        if err:
            return err
        resp = "–ê–∫—ã—Ä–∫—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–ª–∞—Ä:\n"
        for t in txs:
            resp += f"- {t['type']}: {t['amount']:.2f} —Å–æ–º {t['direction']}, {t['timestamp']}\n"
        return resp

# Tool: Transfer money (params from function signature)
@server.tool(
    name="transfer_money",
    description="–ë–∞—à–∫–∞ –∫–æ–ª–¥–æ–Ω—É—É—á—É–≥–∞ –∞—Ç—ã –±–æ—é–Ω—á–∞ –∞–∫—á–∞ –∫–æ—Ç–æ—Ä—É—É."
)
async def transfer_money_tool(user_id: int, to_name: str, amount: float = 0):
    """Transfer money to another user by name"""
    with app.app_context():
        user = User.query.get(user_id)
        if not user:
            return "–ö–æ–ª–¥–æ–Ω—É—É—á—É —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫."
        ok, result = transfer_money(user, to_name, amount)
        return result

# Tool: Get last incoming transaction
@server.tool(
    name="get_last_incoming_transaction",
    description="–ê–∫—ã—Ä–∫—ã –∫–∏—Ä–≥–µ–Ω —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ç—É—É—Ä–∞–ª—É—É –º–∞–∞–ª—ã–º–∞—Ç –∞–ª—É—É (–∫–∏–º –∞–∫—á–∞ –∫–æ—Ç–æ—Ä–¥—É –∂–∞–Ω–∞ –∫–∞–Ω—á–∞)."
)
async def get_last_incoming_transaction_tool(user_id: int):
    """Get information about the last incoming transaction"""
    with app.app_context():
        user = User.query.get(user_id)
        if not user:
            return "–ö–æ–ª–¥–æ–Ω—É—É—á—É —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫."
        _, result = get_last_incoming_transaction(user)
        return result

# Tool: Get accounts info
@server.tool(
    name="get_accounts_info",
    description="–ö–æ–ª–¥–æ–Ω—É—É—á—É–Ω—É–Ω –±–∞—Ä–¥—ã–∫ —ç—Å–µ–ø—Ç–µ—Ä–∏–Ω–∏–Ω —Ç–∏–∑–º–µ—Å–∏ –∂–∞–Ω–∞ –±–∞–ª–∞–Ω—Å—ã."
)
async def get_accounts_info_tool(user_id: int):
    with app.app_context():
        user = User.query.get(user_id)
        if not user:
            return "–ö–æ–ª–¥–æ–Ω—É—É—á—É —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫."
        accounts, err = get_accounts_info(user)
        if err:
            return err
        resp = "–°–∏–∑–¥–∏–Ω —ç—Å–µ–ø—Ç–µ—Ä–∏“£–∏–∑:\n"
        for acc in accounts:
            resp += f"- {acc['account_type']}: {acc['balance']:.2f} —Å–æ–º\n"
        return resp

# Tool: Get incoming sum for period
@server.tool(
    name="get_incoming_sum_for_period",
    description="–ö”©—Ä—Å”©—Ç“Ø–ª–≥”©–Ω –∞—Ä–∞–ª—ã–∫—Ç–∞ –∫–∏—Ä–≥–µ–Ω –∫–æ—Ç–æ—Ä—É—É–ª–∞—Ä (–≤—Ö–æ–¥—è—â–∏–µ) –∂–∞–ª–ø—ã —Å—É–º–º–∞—Å—ã."
)
async def get_incoming_sum_for_period_tool(user_id: int, start_date: str, end_date: str):
    with app.app_context():
        user = User.query.get(user_id)
        if not user:
            return "–ö–æ–ª–¥–æ–Ω—É—É—á—É —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫."
        total, msg = get_incoming_sum_for_period(user, start_date, end_date)
        return msg

# Tool: Get outgoing sum for period
@server.tool(
    name="get_outgoing_sum_for_period",
    description="–ö”©—Ä—Å”©—Ç“Ø–ª–≥”©–Ω –∞—Ä–∞–ª—ã–∫—Ç–∞ —á—ã–∫–∫–∞–Ω –∫–æ—Ç–æ—Ä—É—É–ª–∞—Ä (–∏—Å—Ö–æ–¥—è—â–∏–µ) –∂–∞–ª–ø—ã —Å—É–º–º–∞—Å—ã."
)
async def get_outgoing_sum_for_period_tool(user_id: int, start_date: str, end_date: str):
    with app.app_context():
        user = User.query.get(user_id)
        if not user:
            return "–ö–æ–ª–¥–æ–Ω—É—É—á—É —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫."
        total, msg = get_outgoing_sum_for_period(user, start_date, end_date)
        return msg

# Tool: Get last 3 transfer recipients
@server.tool(
    name="get_last_3_transfer_recipients",
    description="–ê–∫—ã—Ä–∫—ã 3 –∫–æ—Ç–æ—Ä—É—É–Ω—É–Ω –∞–ª—É—É—á—É–ª–∞—Ä—ã–Ω—ã–Ω —Ç–∏–∑–º–µ—Å–∏."
)
async def get_last_3_transfer_recipients_tool(user_id: int):
    with app.app_context():
        user = User.query.get(user_id)
        if not user:
            return "–ö–æ–ª–¥–æ–Ω—É—É—á—É —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫."
        recipients, err = get_last_3_transfer_recipients(user)
        if err:
            return err
        if not recipients:
            return "–ê–∫—ã—Ä–∫—ã –∞–ª—É—É—á—É–ª–∞—Ä —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫."
        resp = "–ê–∫—ã—Ä–∫—ã 3 –∞–ª—É—É—á—É:\n"
        for name in recipients:
            resp += f"- {name}\n"
        return resp

# Tool: Get largest transaction
@server.tool(
    name="get_largest_transaction",
    description="–≠“£ —á–æ“£ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è (—Å—É–º–º–∞—Å—ã –±–æ—é–Ω—á–∞) –∂–∞–Ω–∞ –∞–Ω—ã–Ω –±–∞–≥—ã—Ç—ã."
)
async def get_largest_transaction_tool(user_id: int):
    with app.app_context():
        user = User.query.get(user_id)
        if not user:
            return "–ö–æ–ª–¥–æ–Ω—É—É—á—É —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫."
        tx, err = get_largest_transaction(user)
        if err:
            return err
        return f"–≠“£ —á–æ“£ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {tx['amount']:.2f} —Å–æ–º {tx['direction']}, {tx['timestamp']}"

@server.tool(
    name="list_all_card_names",
    description="DemirBank'—Ç–∞–≥—ã –±–∞—Ä–¥—ã–∫ –∫–∞—Ä—Ç–∞–ª–∞—Ä–¥—ã–Ω —Ç–∏–∑–º–µ—Å–∏–Ω –∫–∞–π—Ç–∞—Ä–∞—Ç"
)
async def list_all_card_names_tool():
    result = list_all_card_names()
    result_text = ""
    for card in result:
        result_text += f"–ö–∞—Ä—Ç–∞ –∞—Ç—ã: {card['name']}\n"
    return result_text

@server.tool(
    name="get_card_details",
    description="–ö–∞—Ä—Ç–∞ –∞—Ç–∞–ª—ã—à—ã –±–æ—é–Ω—á–∞ –±–∞—Ä–¥—ã–∫ –Ω–µ–≥–∏–∑–≥–∏ –º–∞–∞–ª—ã–º–∞—Ç—Ç—ã –∫–∞–π—Ç–∞—Ä–∞—Ç (–≤–∞–ª—é—Ç–∞, –º”©”©–Ω”©—Ç“Ø, —á—ã–≥—ã–º–¥–∞—Ä, –ª–∏–º–∏—Ç—Ç–µ—Ä, —Å“Ø—Ä”©—Ç—Ç”©–º”©)."
)
async def get_card_details_tool(card_name: str):
    result = get_card_details(card_name)
    result_text = ""
    for key, value in result.items():
        if key == "error":
            return result["error"]
        result_text += f"{key}: {value}\n"
    return result_text

@server.tool(
    name="compare_cards",
    description="–ö–∞—Ä—Ç–∞–ª–∞—Ä–¥—ã –Ω–µ–≥–∏–∑–≥–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä –±–æ—é–Ω—á–∞ —Å–∞–ª—ã—à—Ç—ã—Ä–∞—Ç. –ê—Ä–≥—É–º–µ–Ω—Ç –∫–∞—Ç–∞—Ä—ã –∫–∞—Ä—Ç–∞–ª–∞—Ä–¥—ã–Ω –∞—Ç—Ç–∞—Ä—ã–Ω—ã–Ω —Ç–∏–∑–º–µ—Å–∏ –±–µ—Ä–∏–ª–µ—Ç (2-4 –∫–∞—Ä—Ç–∞)."
)
async def compare_cards_tool(card_names: list):
    cards = compare_cards(card_names)
    
    if len(cards) < 2:
        return "–ö–∞—Ä—Ç–∞ —Å–∞–ª—ã—à—Ç—ã—Ä—É—É “Ø—á“Ø–Ω —ç“£ –∞–∑—ã 2 –∫–∞—Ä—Ç–∞ –∫–µ—Ä–µ–∫."
    
    # –ë–∞—Ä–¥—ã–∫ –∫–∞—Ä—Ç–∞–ª–∞—Ä–¥–∞–Ω –±–∞—Ä–¥—ã–∫ —É–Ω–∏–∫–∞–ª–¥—É—É –∞—á–∫—ã—á—Ç–∞—Ä–¥—ã –∞–ª—É—É
    all_keys = set()
    for card in cards:
        all_keys.update(card.keys())
    all_keys = list(all_keys)
    
    # –ö–∞—Ä—Ç–∞–ª–∞—Ä–¥—ã–Ω —Ç–∏–∑–º–µ—Å–∏
    result_text = "üìã –°–∞–ª—ã—à—Ç—ã—Ä—ã–ª–≥–∞–Ω –∫–∞—Ä—Ç–∞–ª–∞—Ä:\n"
    for i, card in enumerate(cards, 1):
        result_text += f"{i}. {card['name']}\n"
    result_text += "\n"
    
    # –û–∫—à–æ—à—Ç—É–∫—Ç–∞—Ä –∂–∞–Ω–∞ –∞–π—ã—Ä–º–∞—á—ã–ª—ã–∫—Ç–∞—Ä–¥—ã —ç—Å–µ–ø—Ç”©”©
    similarities = []
    differences = []
    
    for key in all_keys:
        if key == "name":
            continue
            
        values = []
        for card in cards:
            value = card.get(key, "–±–µ–ª–≥–∏—Å–∏–∑")
            if isinstance(value, list):
                value = ", ".join(value)
            elif isinstance(value, dict):
                value = str(value)  # –°–ª–æ–≤–∞—Ä—å–¥—ã —Å—Ç—Ä–æ–∫–∞–≥–∞ –∞–π–ª–∞–Ω–¥—ã—Ä—É—É
            values.append(value)
        
        # –ë–∞—Ä–¥—ã–∫ –º–∞–∞–Ω–∏–ª–µ—Ä –±–∏—Ä–¥–µ–π–±–∏? (—Å–ª–æ–≤–∞—Ä—å–ª–∞—Ä–¥—ã –¥–∞ —ç—Å–∫–µ –∞–ª—É—É –º–µ–Ω–µ–Ω)
        unique_values = set()
        for val in values:
            if isinstance(val, dict):
                unique_values.add(str(val))
            else:
                unique_values.add(val)
        
        if len(unique_values) == 1:
            similarities.append((key, values[0]))
        else:
            diff_info = []
            for i, (card, value) in enumerate(zip(cards, values), 1):
                diff_info.append(f"{card['name']}: {value}")
            differences.append((key, diff_info))
    
    # –û–∫—à–æ—à—Ç—É–∫—Ç–∞—Ä –±”©–ª“Ø–º“Ø
    result_text += "‚úÖ –û–∫—à–æ—à—Ç—É–∫—Ç–∞—Ä—ã:\n"
    if similarities:
        for key, value in similarities:
            key_name = key.replace('_', ' ').title()
            result_text += f"‚Ä¢ {key_name}: {value}\n"
    else:
        result_text += "‚Ä¢ –ñ–æ–∫\n"
        
    # –ê–π—ã—Ä–º–∞—á—ã–ª—ã–∫—Ç–∞—Ä –±”©–ª“Ø–º“Ø
    result_text += "‚öñÔ∏è –ê–π—ã—Ä–º–∞—á—ã–ª—ã–∫—Ç–∞—Ä—ã:\n"
    if differences:
        for key, diff_info in differences:
            key_name = key.replace('_', ' ').title()
            result_text += f"‚Ä¢ {key_name}:\n"
            for info in diff_info:
                result_text += f"  - {info}\n"
    else:
        result_text += "‚Ä¢ –ñ–æ–∫\n"
    
    return result_text

@server.tool(
    name="get_card_limits",
    description="–ö–∞—Ä—Ç–∞ –∞—Ç–∞–ª—ã—à—ã –±–æ—é–Ω—á–∞ –ª–∏–º–∏—Ç—Ç–µ—Ä–¥–∏ –∫–∞–π—Ç–∞—Ä–∞—Ç (ATM, POS, –∫–æ–Ω—Ç–∞–∫—Ç—Å—ã–∑ –∂.–±.)."
)
async def get_card_limits_tool(card_name: str):
    result = get_card_limits(card_name)
    if "error" in result:
        return result["error"]
    
    return json.dumps(result, ensure_ascii=False, indent=2)

@server.tool(
    name="get_card_benefits",
    description="–ö–∞—Ä—Ç–∞ –∞—Ç–∞–ª—ã—à—ã –±–æ—é–Ω—á–∞ –∞—Ä—Ç—ã–∫—á—ã–ª—ã–∫—Ç–∞—Ä–¥—ã –∂–∞–Ω–∞ ”©–∑–≥”©—á”©–ª“Ø–∫—Ç”©—Ä–¥“Ø –∫–∞–π—Ç–∞—Ä–∞—Ç."
)
async def get_card_benefits_tool(card_name: str):
    result = get_card_benefits(card_name)
    return json.dumps(result, ensure_ascii=False, indent=2)

@server.tool(
    name="get_cards_by_type",
    description="–ö–∞—Ä—Ç–∞–ª–∞—Ä–¥—ã —Ç“Ø—Ä“Ø –±–æ—é–Ω—á–∞ —Ñ–∏–ª—å—Ç—Ä–ª–µ–π—Ç (–¥–µ–±–µ—Ç—Ç–∏–∫/–∫—Ä–µ–¥–∏—Ç—Ç–∏–∫)."
)
async def get_cards_by_type_tool(card_type: str):
    result = get_cards_by_type(card_type)
    result_text = f"üìã {card_type.title()} –∫–∞—Ä—Ç–∞–ª–∞—Ä—ã:\n\n"
    for card in result:
        result_text += f"‚Ä¢ {card['name']}\n"
    return result_text

@server.tool(
    name="get_cards_by_payment_system",
    description="–ö–∞—Ä—Ç–∞–ª–∞—Ä–¥—ã —Ç”©–ª”©–º —Å–∏—Å—Ç–µ–º–∞—Å—ã –±–æ—é–Ω—á–∞ —Ñ–∏–ª—å—Ç—Ä–ª–µ–π—Ç (Visa/Mastercard)."
)
async def get_cards_by_payment_system_tool(system: str):
    result = get_cards_by_payment_system(system)
    result_text = f"üìã {system.title()} –∫–∞—Ä—Ç–∞–ª–∞—Ä—ã:\n\n"
    for card in result:
        result_text += f"‚Ä¢ {card['name']}\n"
    return result_text

@server.tool(
    name="get_cards_by_fee_range",
    description="–ö–∞—Ä—Ç–∞–ª–∞—Ä–¥—ã –∂—ã–ª–¥—ã–∫ –∞–∫—ã –¥–∏–∞–ø–∞–∑–æ–Ω—É –±–æ—é–Ω—á–∞ —Ñ–∏–ª—å—Ç—Ä–ª–µ–π—Ç."
)
async def get_cards_by_fee_range_tool(min_fee: str = None, max_fee: str = None):
    result = get_cards_by_fee_range(min_fee, max_fee)
    result_text = "üìã –ö–∞—Ä—Ç–∞–ª–∞—Ä:\n\n"
    for card in result:
        fee = card.get("annual_fee", "–±–µ–ª–≥–∏—Å–∏–∑")
        result_text += f"‚Ä¢ {card['name']}: {fee}\n"
    return result_text

@server.tool(
    name="get_cards_by_currency",
    description="–ö–∞—Ä—Ç–∞–ª–∞—Ä–¥—ã –≤–∞–ª—é—Ç–∞ –±–æ—é–Ω—á–∞ —Ñ–∏–ª—å—Ç—Ä–ª–µ–π—Ç (KGS, USD, EUR)."
)
async def get_cards_by_currency_tool(currency: str):
    result = get_cards_by_currency(currency)
    result_text = f"üìã {currency.upper()} –≤–∞–ª—é—Ç–∞—Å—ã–Ω –∫–æ–ª–¥–æ–≥–æ–Ω –∫–∞—Ä—Ç–∞–ª–∞—Ä:\n\n"
    for card in result:
        result_text += f"‚Ä¢ {card['name']}\n"
    return result_text

@server.tool(
    name="get_card_instructions",
    description="–ö–∞—Ä—Ç–∞–Ω—ã–Ω –∫–æ–ª–¥–æ–Ω—É—É –∫”©—Ä—Å”©—Ç–º”©–ª”©—Ä“Ø–Ω –∫–∞–π—Ç–∞—Ä–∞—Ç (Card Plus, Virtual Card “Ø—á“Ø–Ω)."
)
async def get_card_instructions_tool(card_name: str):
    result = get_card_instructions(card_name)
    if "error" in result:
        return result["error"]
    
    result_text = f"üìñ {card_name} –∫–∞—Ä—Ç–∞—Å—ã–Ω—ã–Ω –∫”©—Ä—Å”©—Ç–º”©–ª”©—Ä“Ø:\n\n"
    for key, value in result.items():
        if isinstance(value, dict):
            result_text += f"üîπ {key.title()}:\n"
            for sub_key, sub_value in value.items():
                result_text += f"  ‚Ä¢ {sub_key}: {sub_value}\n"
        elif isinstance(value, list):
            result_text += f"üîπ {key.title()}:\n"
            for item in value:
                result_text += f"  ‚Ä¢ {item}\n"
        else:
            result_text += f"üîπ {key.title()}: {value}\n"
    return result_text

@server.tool(
    name="get_card_conditions",
    description="–ö–∞—Ä—Ç–∞–Ω—ã–Ω —à–∞—Ä—Ç—Ç–∞—Ä—ã–Ω –∂–∞–Ω–∞ —Ç–∞–ª–∞–ø—Ç–∞—Ä—ã–Ω –∫–∞–π—Ç–∞—Ä–∞—Ç (Elkart “Ø—á“Ø–Ω)."
)
async def get_card_conditions_tool(card_name: str):
    result = get_card_conditions(card_name)
    if "error" in result:
        return result["error"]
    
    result_text = f"üìã {card_name} –∫–∞—Ä—Ç–∞—Å—ã–Ω—ã–Ω —à–∞—Ä—Ç—Ç–∞—Ä—ã:\n\n"
    for key, value in result.items():
        if isinstance(value, dict):
            result_text += f"üîπ {key.title()}:\n"
            for sub_key, sub_value in value.items():
                result_text += f"  ‚Ä¢ {sub_key}: {sub_value}\n"
        else:
            result_text += f"üîπ {key.title()}: {value}\n"
    return result_text

@server.tool(
    name="get_cards_with_features",
    description="–ë–µ–ª–≥–∏–ª“Ø“Ø ”©–∑–≥”©—á”©–ª“Ø–∫—Ç”©—Ä–≥”© —ç—ç –∫–∞—Ä—Ç–∞–ª–∞—Ä–¥—ã —Ç–∞–±–∞—Ç."
)
async def get_cards_with_features_tool(features: list):
    result = get_cards_with_features(features)
    result_text = f"üìã '{', '.join(features)}' ”©–∑–≥”©—á”©–ª“Ø–∫—Ç”©—Ä“Ø –±–∞—Ä –∫–∞—Ä—Ç–∞–ª–∞—Ä:\n\n"
    for card in result:
        result_text += f"‚Ä¢ {card['name']}\n"
    return result_text

@server.tool(
    name="get_card_recommendations",
    description="–ö—Ä–∏—Ç–µ—Ä–∏–π–ª–µ—Ä–≥–µ —ã–ª–∞–π—ã–∫ –∫–∞—Ä—Ç–∞ —Å—É–Ω—É—à—Ç–∞—Ä—ã–Ω –∫–∞–π—Ç–∞—Ä–∞—Ç."
)
async def get_card_recommendations_tool(criteria: dict):
    result = get_card_recommendations(criteria)
    result_text = "üéØ –ö–∞—Ä—Ç–∞ —Å—É–Ω—É—à—Ç–∞—Ä—ã:\n\n"
    for i, card in enumerate(result, 1):
        score = card.get("recommendation_score", 0)
        fee = card.get("annual_fee", "–±–µ–ª–≥–∏—Å–∏–∑")
        result_text += f"{i}. {card['name']} (—É–ø–∞–π: {score})\n"
        result_text += f"   –ñ—ã–ª–¥—ã–∫ –∞–∫—ã: {fee}\n"
        if "descr" in card:
            descr = card["descr"][:100] + "..." if len(card["descr"]) > 100 else card["descr"]
            result_text += f"   –°“Ø—Ä”©—Ç—Ç”©–º”©: {descr}\n"
        result_text += "\n"
    return result_text

@server.tool(
    name="get_bank_info",
    description="–ë–∞–Ω–∫ —Ç—É—É—Ä–∞–ª—É—É –Ω–µ–≥–∏–∑–≥–∏ –º–∞–∞–ª—ã–º–∞—Ç—Ç—ã –∫–∞–π—Ç–∞—Ä–∞—Ç (–∞—Ç—ã, –Ω–µ–≥–∏–∑–¥–µ–ª–≥–µ–Ω –∂—ã–ª—ã, –ª–∏—Ü–µ–Ω–∑–∏—è)."
)
async def get_bank_info_tool():
    result = get_bank_info()
    result_text = f"üè¶ {result['bank_name']}\n\n"
    result_text += f"üìÖ –ù–µ–≥–∏–∑–¥–µ–ª–≥–µ–Ω: {result['founded']}\n"
    result_text += f"üìú –õ–∏—Ü–µ–Ω–∑–∏—è: {result['license']}\n"
    result_text += f"üìù –°“Ø—Ä”©—Ç—Ç”©–º”©: {result['descr']}\n"
    return result_text

@server.tool(
    name="get_bank_mission",
    description="–ë–∞–Ω–∫—Ç—ã–Ω –º–∏—Å—Å–∏—è—Å—ã–Ω –∂–∞–Ω–∞ —Ç–∞—Ä—ã—Ö—ã–Ω –∫–∞–π—Ç–∞—Ä–∞—Ç."
)
async def get_bank_mission_tool():
    mission = get_bank_mission()
    result_text = "üéØ –ë–∞–Ω–∫—Ç—ã–Ω –º–∏—Å—Å–∏—è—Å—ã:\n\n"
    result_text += mission
    return result_text

@server.tool(
    name="get_bank_values",
    description="–ë–∞–Ω–∫—Ç—ã–Ω –±–∞–∞–ª—É—É–ª—É–∫—Ç–∞—Ä—ã–Ω –∂–∞–Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø—Ç–µ—Ä–∏–Ω –∫–∞–π—Ç–∞—Ä–∞—Ç."
)
async def get_bank_values_tool():
    values = get_bank_values()
    result_text = "üíé –ë–∞–Ω–∫—Ç—ã–Ω –±–∞–∞–ª—É—É–ª—É–∫—Ç–∞—Ä—ã:\n\n"
    for i, value in enumerate(values, 1):
        result_text += f"{i}. {value}\n"
    return result_text

@server.tool(
    name="get_ownership_info",
    description="–ë–∞–Ω–∫—Ç—ã–Ω —ç—ç–ª–∏–∫ –º–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä—ã–Ω –∫–∞–π—Ç–∞—Ä–∞—Ç."
)
async def get_ownership_info_tool():
    ownership = get_ownership_info()
    result_text = "üë• –≠—ç–ª–∏–∫ –º–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä—ã:\n\n"
    result_text += f"üîπ –ù–µ–≥–∏–∑–≥–∏ –∞–∫—Ü–∏–æ–Ω–µ—Ä: {ownership.get('main_shareholder', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
    result_text += f"üîπ ”®–ª–∫”©: {ownership.get('country', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
    result_text += f"üîπ –≠—ç–ª–∏–∫ –ø–∞–π—ã: {ownership.get('ownership_percentage', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
    return result_text

@server.tool(
    name="get_branch_network",
    description="–ë–∞–Ω–∫—Ç—ã–Ω —Ñ–∏–ª–∏–∞–ª–¥–∞—Ä —Ç–∞—Ä–º–∞–≥—ã–Ω –∫–∞–π—Ç–∞—Ä–∞—Ç."
)
async def get_branch_network_tool():
    branches = get_branch_network()
    result_text = "üè¢ –§–∏–ª–∏–∞–ª–¥–∞—Ä —Ç–∞—Ä–º–∞–≥—ã:\n\n"
    result_text += f"üèõÔ∏è –ë–∞—à–∫—ã –∫–µ“£—Å–µ: {branches.get('head_office', '–±–µ–ª–≥–∏—Å–∏–∑')}\n\n"
    
    regions = branches.get('regions', [])
    if regions:
        result_text += "üìç –ê–π–º–∞–∫—Ç—ã–∫ —Ñ–∏–ª–∏–∞–ª–¥–∞—Ä:\n"
        for i, region in enumerate(regions, 1):
            result_text += f"{i}. {region}\n"
    
    return result_text

@server.tool(
    name="get_contact_info",
    description="–ë–∞–Ω–∫—Ç—ã–Ω –±–∞–π–ª–∞–Ω—ã—à –º–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä—ã–Ω –∫–∞–π—Ç–∞—Ä–∞—Ç."
)
async def get_contact_info_tool():
    contact = get_contact_info()
    result_text = "üìû –ë–∞–π–ª–∞–Ω—ã—à –º–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä—ã:\n\n"
    result_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {contact.get('phone', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
    result_text += f"üìß –≠–ª–µ–∫—Ç—Ä–æ–Ω–¥—É–∫ –ø–æ—á—Ç–∞: {contact.get('email', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
    result_text += f"üìç –î–∞—Ä–µ–∫: {contact.get('address', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
    return result_text

@server.tool(
    name="get_complete_about_us",
    description="–ë–∞–Ω–∫ —Ç—É—É—Ä–∞–ª—É—É —Ç–æ–ª—É–∫ –º–∞–∞–ª—ã–º–∞—Ç—Ç—ã –∫–∞–π—Ç–∞—Ä–∞—Ç."
)
async def get_complete_about_us_tool():
    data = get_complete_about_us()
    result_text = f"üè¶ {data.get('bank_name', 'DemirBank')}\n\n"
    
    # Mission
    result_text += "üéØ –ú–∏—Å—Å–∏—è:\n"
    result_text += f"{data.get('mission', '')}\n\n"
    
    # Values
    values = data.get('values', [])
    if values:
        result_text += "üíé –ë–∞–∞–ª—É—É–ª—É–∫—Ç–∞—Ä:\n"
        for i, value in enumerate(values, 1):
            result_text += f"{i}. {value}\n"
        result_text += "\n"
    
    # Ownership
    ownership = data.get('ownership', {})
    if ownership:
        result_text += "üë• –≠—ç–ª–∏–∫:\n"
        result_text += f"‚Ä¢ –ù–µ–≥–∏–∑–≥–∏ –∞–∫—Ü–∏–æ–Ω–µ—Ä: {ownership.get('main_shareholder', '')}\n"
        result_text += f"‚Ä¢ ”®–ª–∫”©: {ownership.get('country', '')}\n"
        result_text += f"‚Ä¢ –≠—ç–ª–∏–∫ –ø–∞–π—ã: {ownership.get('ownership_percentage', '')}\n\n"
    
    # Branches
    branches = data.get('branches', {})
    if branches:
        result_text += "üè¢ –§–∏–ª–∏–∞–ª–¥–∞—Ä:\n"
        result_text += f"‚Ä¢ –ë–∞—à–∫—ã –∫–µ“£—Å–µ: {branches.get('head_office', '')}\n"
        regions = branches.get('regions', [])
        if regions:
            result_text += "‚Ä¢ –ê–π–º–∞–∫—Ç—ã–∫ —Ñ–∏–ª–∏–∞–ª–¥–∞—Ä:\n"
            for region in regions:
                result_text += f"  - {region}\n"
        result_text += "\n"
    
    # Contact
    contact = data.get('contact', {})
    if contact:
        result_text += "üìû –ë–∞–π–ª–∞–Ω—ã—à:\n"
        result_text += f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {contact.get('phone', '')}\n"
        result_text += f"‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–¥—É–∫ –ø–æ—á—Ç–∞: {contact.get('email', '')}\n"
        result_text += f"‚Ä¢ –î–∞—Ä–µ–∫: {contact.get('address', '')}\n"
    
    return result_text

@server.tool(
    name="get_about_us_section",
    description="–ë–∞–Ω–∫ —Ç—É—É—Ä–∞–ª—É—É –º–∞–∞–ª—ã–º–∞—Ç—Ç—ã–Ω –±–µ–ª–≥–∏–ª“Ø“Ø –±”©–ª“Ø–º“Ø–Ω –∫–∞–π—Ç–∞—Ä–∞—Ç."
)
async def get_about_us_section_tool(section: str):
    data = get_about_us_section(section)
    if isinstance(data, str) and "not found" in data:
        return data
    
    result_text = f"üìã {section.title()}:\n\n"
    
    if isinstance(data, dict):
        for key, value in data.items():
            if isinstance(value, list):
                result_text += f"üîπ {key.replace('_', ' ').title()}:\n"
                for item in value:
                    result_text += f"  ‚Ä¢ {item}\n"
            else:
                result_text += f"üîπ {key.replace('_', ' ').title()}: {value}\n"
    elif isinstance(data, list):
        for i, item in enumerate(data, 1):
            result_text += f"{i}. {item}\n"
    else:
        result_text += str(data)
    
    return result_text


# Deposit tools

@server.tool(
    name="list_all_deposit_names",
    description="DemirBank'—Ç–∞–≥—ã –±–∞—Ä–¥—ã–∫ –¥–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä–¥–∏–Ω —Ç–∏–∑–º–µ—Å–∏–Ω –∫–∞–π—Ç–∞—Ä–∞—Ç"
)
async def list_all_deposit_names_tool():
    deposits = list_all_deposit_names()
    result_text = "üí∞ –ë–∞—Ä–¥—ã–∫ –¥–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä:\n\n"
    for i, deposit in enumerate(deposits, 1):
        result_text += f"{i}. {deposit['name']}\n"
    return result_text

@server.tool(
    name="get_deposit_details",
    description="–î–µ–ø–æ–∑–∏—Ç –∞—Ç–∞–ª—ã—à—ã –±–æ—é–Ω—á–∞ –±–∞—Ä–¥—ã–∫ –Ω–µ–≥–∏–∑–≥–∏ –º–∞–∞–ª—ã–º–∞—Ç—Ç—ã –∫–∞–π—Ç–∞—Ä–∞—Ç (–≤–∞–ª—é—Ç–∞, –º”©”©–Ω”©—Ç, –ø–∞–π—ã–∑–¥—ã–∫ —Å—Ç–∞–≤–∫–∞, –º–∏–Ω–∏–º–∞–ª–¥—ã–∫ —Å—É–º–º–∞, —Å“Ø—Ä”©—Ç—Ç”©–º”©)."
)
async def get_deposit_details_tool(deposit_name: str):
    deposit = get_deposit_details(deposit_name)
    if "error" in deposit:
        return deposit["error"]
    
    result_text = f"üí∞ {deposit['name']}\n\n"
    result_text += f"üí± –í–∞–ª—é—Ç–∞: {', '.join(deposit.get('currency', []))}\n"
    result_text += f"üíµ –ú–∏–Ω–∏–º–∞–ª–¥—ã–∫ —Å—É–º–º–∞: {deposit.get('min_amount', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
    result_text += f"‚è∞ –ú”©”©–Ω”©—Ç: {deposit.get('term', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
    result_text += f"üìà –ü–∞–π—ã–∑–¥—ã–∫ —Å—Ç–∞–≤–∫–∞: {deposit.get('rate', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
    result_text += f"üí∏ –ß—ã–≥–∞—Ä—É—É: {deposit.get('withdrawal', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
    result_text += f"‚ûï –¢–æ–ª—É–∫—Ç–æ–æ: {deposit.get('replenishment', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
    result_text += f"üìä –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {deposit.get('capitalization', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
    result_text += f"üìù –°“Ø—Ä”©—Ç—Ç”©–º”©: {deposit.get('descr', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
    
    return result_text

@server.tool(
    name="compare_deposits",
    description="–î–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä–¥–∏ –Ω–µ–≥–∏–∑–≥–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä –±–æ—é–Ω—á–∞ —Å–∞–ª—ã—à—Ç—ã—Ä–∞—Ç. –ê—Ä–≥—É–º–µ–Ω—Ç –∫–∞—Ç–∞—Ä—ã –¥–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä–¥–∏–Ω –∞—Ç—Ç–∞—Ä—ã–Ω—ã–Ω —Ç–∏–∑–º–µ—Å–∏ –±–µ—Ä–∏–ª–µ—Ç (2-4 –¥–µ–ø–æ–∑–∏—Ç)."
)
async def compare_deposits_tool(deposit_names: list):
    deposits = compare_deposits(deposit_names)
    if len(deposits) < 2:
        return "–î–µ–ø–æ–∑–∏—Ç —Å–∞–ª—ã—à—Ç—ã—Ä—É—É “Ø—á“Ø–Ω —ç“£ –∞–∑—ã 2 –¥–µ–ø–æ–∑–∏—Ç –∫–µ—Ä–µ–∫."
    
    all_keys = set()
    for deposit in deposits:
        all_keys.update(deposit.keys())
    all_keys = list(all_keys)
    
    result_text = "üìã –°–∞–ª—ã—à—Ç—ã—Ä—ã–ª–≥–∞–Ω –¥–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä:\n"
    for i, deposit in enumerate(deposits, 1):
        result_text += f"{i}. {deposit['name']}\n"
    result_text += "\n"
    
    # Detailed comparison
    for key in all_keys:
        if key == "name": continue
        values = []
        for deposit in deposits:
            value = deposit.get(key, "–±–µ–ª–≥–∏—Å–∏–∑")
            if isinstance(value, list): value = ", ".join(value)
            elif isinstance(value, dict): value = str(value)
            values.append(value)
        
        unique_values = set()
        for val in values:
            if isinstance(val, dict): unique_values.add(str(val))
            else: unique_values.add(val)
        
        if len(unique_values) == 1:
            result_text += f"‚úÖ –ë–∞—Ä–¥—ã–≥—ã –±–∏—Ä–¥–µ–π: {values[0]}\n"
        else:
            for i, (deposit, value) in enumerate(zip(deposits, values), 1):
                result_text += f"  {i}. {deposit['name']}: {value}\n"
        result_text += "\n"
    
    return result_text

@server.tool(
    name="get_deposits_by_currency",
    description="–î–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä–¥–∏ –≤–∞–ª—é—Ç–∞ –±–æ—é–Ω—á–∞ —Ñ–∏–ª—å—Ç—Ä–ª–µ–π—Ç (KGS, USD, EUR, RUB)."
)
async def get_deposits_by_currency_tool(currency: str):
    deposits = get_deposits_by_currency(currency)
    result_text = f"üí∞ {currency.upper()} –≤–∞–ª—é—Ç–∞—Å—ã–Ω–¥–∞–≥—ã –¥–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä:\n\n"
    for i, deposit in enumerate(deposits, 1):
        result_text += f"{i}. {deposit['name']}\n"
        result_text += f"   –ü–∞–π—ã–∑–¥—ã–∫ —Å—Ç–∞–≤–∫–∞: {deposit.get('rate', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
        result_text += f"   –ú–∏–Ω–∏–º–∞–ª–¥—ã–∫ —Å—É–º–º–∞: {deposit.get('min_amount', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
        result_text += f"   –ú”©”©–Ω”©—Ç: {deposit.get('term', '–±–µ–ª–≥–∏—Å–∏–∑')}\n\n"
    return result_text

@server.tool(
    name="get_deposits_by_term_range",
    description="–î–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä–¥–∏ –º”©”©–Ω”©—Ç –¥–∏–∞–ø–∞–∑–æ–Ω—É –±–æ—é–Ω—á–∞ —Ñ–∏–ª—å—Ç—Ä–ª–µ–π—Ç."
)
async def get_deposits_by_term_range_tool(min_term: str = None, max_term: str = None):
    deposits = get_deposits_by_term_range(min_term, max_term)
    result_text = "‚è∞ –ú”©”©–Ω”©—Ç –±–æ—é–Ω—á–∞ –¥–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä:\n\n"
    for i, deposit in enumerate(deposits, 1):
        result_text += f"{i}. {deposit['name']}\n"
        result_text += f"   –ú”©”©–Ω”©—Ç: {deposit.get('term', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
        result_text += f"   –ü–∞–π—ã–∑–¥—ã–∫ —Å—Ç–∞–≤–∫–∞: {deposit.get('rate', '–±–µ–ª–≥–∏—Å–∏–∑')}\n\n"
    return result_text

@server.tool(
    name="get_deposits_by_min_amount",
    description="–î–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä–¥–∏ –º–∏–Ω–∏–º–∞–ª–¥—ã–∫ —Å—É–º–º–∞ –±–æ—é–Ω—á–∞ —Ñ–∏–ª—å—Ç—Ä–ª–µ–π—Ç."
)
async def get_deposits_by_min_amount_tool(max_amount: str):
    deposits = get_deposits_by_min_amount(max_amount)
    result_text = f"üíµ {max_amount} —á–µ–π–∏–Ω–∫–∏ –º–∏–Ω–∏–º–∞–ª–¥—ã–∫ —Å—É–º–º–∞–¥–∞–≥—ã –¥–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä:\n\n"
    for i, deposit in enumerate(deposits, 1):
        result_text += f"{i}. {deposit['name']}\n"
        result_text += f"   –ú–∏–Ω–∏–º–∞–ª–¥—ã–∫ —Å—É–º–º–∞: {deposit.get('min_amount', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
        result_text += f"   –ü–∞–π—ã–∑–¥—ã–∫ —Å—Ç–∞–≤–∫–∞: {deposit.get('rate', '–±–µ–ª–≥–∏—Å–∏–∑')}\n\n"
    return result_text

@server.tool(
    name="get_deposits_by_rate_range",
    description="–î–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä–¥–∏ –ø–∞–π—ã–∑–¥—ã–∫ —Å—Ç–∞–≤–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω—É –±–æ—é–Ω—á–∞ —Ñ–∏–ª—å—Ç—Ä–ª–µ–π—Ç."
)
async def get_deposits_by_rate_range_tool(min_rate: str = None, max_rate: str = None):
    deposits = get_deposits_by_rate_range(min_rate, max_rate)
    result_text = "üìà –ü–∞–π—ã–∑–¥—ã–∫ —Å—Ç–∞–≤–∫–∞ –±–æ—é–Ω—á–∞ –¥–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä:\n\n"
    for i, deposit in enumerate(deposits, 1):
        result_text += f"{i}. {deposit['name']}\n"
        result_text += f"   –ü–∞–π—ã–∑–¥—ã–∫ —Å—Ç–∞–≤–∫–∞: {deposit.get('rate', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
        result_text += f"   –ú”©”©–Ω”©—Ç: {deposit.get('term', '–±–µ–ª–≥–∏—Å–∏–∑')}\n\n"
    return result_text

@server.tool(
    name="get_deposits_with_replenishment",
    description="–¢–æ–ª—É–∫—Ç–æ–æ–≥–æ –º“Ø–º–∫“Ø–Ω–¥“Ø–∫ –±–µ—Ä–≥–µ–Ω –¥–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä–¥–∏ –∫–∞–π—Ç–∞—Ä–∞—Ç."
)
async def get_deposits_with_replenishment_tool():
    deposits = get_deposits_with_replenishment()
    result_text = "‚ûï –¢–æ–ª—É–∫—Ç–æ–æ–≥–æ –º“Ø–º–∫“Ø–Ω–¥“Ø–∫ –±–µ—Ä–≥–µ–Ω –¥–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä:\n\n"
    for i, deposit in enumerate(deposits, 1):
        result_text += f"{i}. {deposit['name']}\n"
        result_text += f"   –ü–∞–π—ã–∑–¥—ã–∫ —Å—Ç–∞–≤–∫–∞: {deposit.get('rate', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
        result_text += f"   –ú”©”©–Ω”©—Ç: {deposit.get('term', '–±–µ–ª–≥–∏—Å–∏–∑')}\n\n"
    return result_text

@server.tool(
    name="get_deposits_with_capitalization",
    description="–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –º“Ø–º–∫“Ø–Ω–¥“Ø–≥“Ø–Ω –±–µ—Ä–≥–µ–Ω –¥–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä–¥–∏ –∫–∞–π—Ç–∞—Ä–∞—Ç."
)
async def get_deposits_with_capitalization_tool():
    deposits = get_deposits_with_capitalization()
    result_text = "üìä –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –º“Ø–º–∫“Ø–Ω–¥“Ø–≥“Ø–Ω –±–µ—Ä–≥–µ–Ω –¥–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä:\n\n"
    for i, deposit in enumerate(deposits, 1):
        result_text += f"{i}. {deposit['name']}\n"
        result_text += f"   –ü–∞–π—ã–∑–¥—ã–∫ —Å—Ç–∞–≤–∫–∞: {deposit.get('rate', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
        result_text += f"   –ú”©”©–Ω”©—Ç: {deposit.get('term', '–±–µ–ª–≥–∏—Å–∏–∑')}\n\n"
    return result_text

@server.tool(
    name="get_deposits_by_withdrawal_type",
    description="–î–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä–¥–∏ —á—ã–≥–∞—Ä—É—É —Ç“Ø—Ä“Ø –±–æ—é–Ω—á–∞ —Ñ–∏–ª—å—Ç—Ä–ª–µ–π—Ç."
)
async def get_deposits_by_withdrawal_type_tool(withdrawal_type: str):
    deposits = get_deposits_by_withdrawal_type(withdrawal_type)
    result_text = f"üí∏ {withdrawal_type} —á—ã–≥–∞—Ä—É—É —Ç“Ø—Ä“Ø–Ω–¥”©–≥“Ø –¥–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä:\n\n"
    for i, deposit in enumerate(deposits, 1):
        result_text += f"{i}. {deposit['name']}\n"
        result_text += f"   –ß—ã–≥–∞—Ä—É—É: {deposit.get('withdrawal', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
        result_text += f"   –ü–∞–π—ã–∑–¥—ã–∫ —Å—Ç–∞–≤–∫–∞: {deposit.get('rate', '–±–µ–ª–≥–∏—Å–∏–∑')}\n\n"
    return result_text

@server.tool(
    name="get_deposit_recommendations",
    description="–ö—Ä–∏—Ç–µ—Ä–∏–π–ª–µ—Ä–≥–µ —ã–ª–∞–π—ã–∫ –¥–µ–ø–æ–∑–∏—Ç —Å—É–Ω—É—à—Ç–∞—Ä—ã–Ω –∫–∞–π—Ç–∞—Ä–∞—Ç."
)
async def get_deposit_recommendations_tool(criteria: dict):
    deposits = get_deposit_recommendations(criteria)
    result_text = "üéØ –î–µ–ø–æ–∑–∏—Ç —Å—É–Ω—É—à—Ç–∞—Ä—ã:\n\n"
    for i, deposit in enumerate(deposits, 1):
        result_text += f"{i}. {deposit['name']}\n"
        result_text += f"   –ü–∞–π—ã–∑–¥—ã–∫ —Å—Ç–∞–≤–∫–∞: {deposit.get('rate', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
        result_text += f"   –ú”©”©–Ω”©—Ç: {deposit.get('term', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
        result_text += f"   –ú–∏–Ω–∏–º–∞–ª–¥—ã–∫ —Å—É–º–º–∞: {deposit.get('min_amount', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
        if 'recommendation_score' in deposit:
            result_text += f"   –°—É–Ω—É—à—Ç—É–∫ –±–∞–ª–ª: {deposit['recommendation_score']}\n"
        result_text += "\n"
    return result_text

@server.tool(
    name="get_government_securities",
    description="–ú–∞–º–ª–µ–∫–µ—Ç—Ç–∏–∫ –±–∞–∞–ª—É—É –∫–∞–≥–∞–∑–¥–∞—Ä–¥—ã –∫–∞–π—Ç–∞—Ä–∞—Ç (Treasury Bills, NBKR Notes)."
)
async def get_government_securities_tool():
    securities = get_government_securities()
    result_text = "üèõÔ∏è –ú–∞–º–ª–µ–∫–µ—Ç—Ç–∏–∫ –±–∞–∞–ª—É—É –∫–∞–≥–∞–∑–¥–∞—Ä:\n\n"
    for i, security in enumerate(securities, 1):
        result_text += f"{i}. {security['name']}\n"
        result_text += f"   –ú”©”©–Ω”©—Ç: {security.get('term', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
        result_text += f"   –ù–æ–º–∏–Ω–∞–ª–¥—ã–∫ —Å—É–º–º–∞: {security.get('nominal_amount', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
        result_text += f"   –¢“Ø—Ä“Ø: {security.get('type', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
        result_text += f"   –ß—ã–≥–∞—Ä—É—É—á—É: {security.get('issuer', '–±–µ–ª–≥–∏—Å–∏–∑')}\n\n"
    return result_text

@server.tool(
    name="get_child_deposits",
    description="–ë–∞–ª–¥–∞—Ä “Ø—á“Ø–Ω –∞—Ç–∞–π—ã–Ω –¥–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä–¥–∏ –∫–∞–π—Ç–∞—Ä–∞—Ç."
)
async def get_child_deposits_tool():
    deposits = get_child_deposits()
    result_text = "üë∂ –ë–∞–ª–¥–∞—Ä “Ø—á“Ø–Ω –¥–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä:\n\n"
    for i, deposit in enumerate(deposits, 1):
        result_text += f"{i}. {deposit['name']}\n"
        result_text += f"   –ü–∞–π—ã–∑–¥—ã–∫ —Å—Ç–∞–≤–∫–∞: {deposit.get('rate', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
        result_text += f"   –ú”©”©–Ω”©—Ç: {deposit.get('term', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
        result_text += f"   –ú–∏–Ω–∏–º–∞–ª–¥—ã–∫ —Å—É–º–º–∞: {deposit.get('min_amount', '–±–µ–ª–≥–∏—Å–∏–∑')}\n\n"
    return result_text

@server.tool(
    name="get_online_deposits",
    description="–û–Ω–ª–∞–π–Ω –∞—á—ã–ª—É—É—á—É –¥–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä–¥–∏ –∫–∞–π—Ç–∞—Ä–∞—Ç."
)
async def get_online_deposits_tool():
    deposits = get_online_deposits()
    result_text = "üåê –û–Ω–ª–∞–π–Ω –¥–µ–ø–æ–∑–∏—Ç—Ç–µ—Ä:\n\n"
    for i, deposit in enumerate(deposits, 1):
        result_text += f"{i}. {deposit['name']}\n"
        result_text += f"   –ü–∞–π—ã–∑–¥—ã–∫ —Å—Ç–∞–≤–∫–∞: {deposit.get('rate', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
        result_text += f"   –ú”©”©–Ω”©—Ç: {deposit.get('term', '–±–µ–ª–≥–∏—Å–∏–∑')}\n"
        result_text += f"   –ú–∏–Ω–∏–º–∞–ª–¥—ã–∫ —Å—É–º–º–∞: {deposit.get('min_amount', '–±–µ–ª–≥–∏—Å–∏–∑')}\n\n"
    return result_text


# Run the MCP server
if __name__ == "__main__":
    server.run()
